"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoWriter = void 0;
const fs_1 = __importDefault(require("fs"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const types_1 = require("./types");
const mkdirp = require('mkdirp');
class AutoWriter {
    constructor(tableText, options) {
        this.tableText = tableText;
        this.options = options;
    }
    write() {
        if (this.options.noWrite) {
            return Promise.resolve();
        }
        mkdirp.sync(path_1.default.resolve(this.options.directory || "./models"));
        const tables = lodash_1.default.keys(this.tableText);
        // write the individual model files
        const promises = tables.map(t => {
            return this.createFile(t);
        });
        // get table names without schema
        // TODO: add schema to model and file names when schema is non-default for the dialect
        const tableNames = tables.map(t => {
            const [schemaName, tableName] = types_1.qNameSplit(t);
            return tableName;
        });
        // write the init-models file
        const ists = this.options.lang === 'ts';
        const initString = ists ? this.createTsInitString(tableNames) : this.createES5InitString(tableNames);
        const initFilePath = path_1.default.join(this.options.directory, "init-models" + (ists ? '.ts' : '.js'));
        const writeFile = util_1.default.promisify(fs_1.default.writeFile);
        const initPromise = writeFile(path_1.default.resolve(initFilePath), initString);
        promises.push(initPromise);
        return Promise.all(promises);
    }
    createFile(table) {
        // FIXME: schema is not used to write the file name and there could be collisions. For now it
        // is up to the developer to pick the right schema, and potentially chose different output
        // folders for each different schema.
        const [schemaName, tableName] = types_1.qNameSplit(table);
        const fileName = types_1.recase(this.options.caseFile, tableName);
        const filePath = path_1.default.join(this.options.directory, fileName + (this.options.lang === 'ts' ? '.ts' : '.js'));
        const writeFile = util_1.default.promisify(fs_1.default.writeFile);
        return writeFile(path_1.default.resolve(filePath), this.tableText[table]);
    }
    // create the TypeScript init-models file to load all the models into Sequelize
    createTsInitString(tables) {
        let str = 'import { Sequelize } from "sequelize";\n';
        const modelNames = [];
        // import statements
        tables.forEach(t => {
            const fileName = types_1.recase(this.options.caseFile, t);
            const modelName = types_1.recase(this.options.caseModel, t);
            modelNames.push(modelName);
            str += `import { ${modelName}, ${modelName}Attributes } from "./${fileName}";\n`;
        });
        // re-export the model classes
        str += '\nexport {\n';
        modelNames.forEach(m => {
            str += `  ${m}, ${m}Attributes,\n`;
        });
        str += '};\n\n';
        // create the initialization function
        str += 'export function initModels(sequelize: Sequelize) {\n';
        modelNames.forEach(m => {
            str += `  ${m}.initModel(sequelize);\n`;
        });
        // return the models
        str += "\n  return {\n";
        modelNames.forEach(m => {
            str += `    ${m},\n`;
        });
        str += '  };\n';
        str += '}\n';
        return str;
    }
    // create the ES5 init-models file to load all the models into Sequelize
    createES5InitString(tables) {
        let str = 'var DataTypes = require("sequelize").DataTypes;\n';
        const modelNames = [];
        // import statements
        tables.forEach(t => {
            const fileName = types_1.recase(this.options.caseFile, t);
            const modelName = types_1.recase(this.options.caseModel, t);
            modelNames.push(modelName);
            str += `var _${modelName} = require("./${fileName}");\n`;
        });
        // create the initialization function
        str += '\nfunction initModels(sequelize) {\n';
        modelNames.forEach(m => {
            str += `  var ${m} = _${m}(sequelize, DataTypes);\n`;
        });
        // return the models
        str += "\n  return {\n";
        modelNames.forEach(m => {
            str += `    ${m},\n`;
        });
        str += '  };\n';
        str += '}\n';
        str += 'module.exports = { initModels };\n';
        return str;
    }
}
exports.AutoWriter = AutoWriter;
//# sourceMappingURL=auto-writer.js.map